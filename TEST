import turtle
import random

# Setup screen
turtle.bgcolor("black")
turtle.title("Space Invaders")

# Score
score = 0

# Invaders
invaderList = []
number_of_invaders = 5
invaderspeed = 5

for i in range(number_of_invaders):
    invader = turtle.Turtle()
    invader.color("red")
    invader.shape("square")
    invader.speed(0)
    invader.penup()
    x = random.randint(-200, 200)
    y = random.randint(100, 200)
    invader.setposition(x, y)
    invaderList.append(invader)

# Player setup
player = turtle.Turtle()
player.color("blue")
player.shape("arrow")
player.speed(0)
player.penup()
player.setheading(90)
player.setposition(0, -250)
playerspeed = 15

# Bullet setup
bullet = turtle.Turtle()
bullet.color("yellow")
bullet.shape("triangle")
bullet.speed(0)
bullet.penup()
bullet.setheading(90)
bullet.shapesize(0.5, 0.5)
bullet.hideturtle()
bulletspeed = 40  # Increased for faster shooting
bulletstate = "ready"

# Movement functions
def move_left():
    x = player.xcor()
    x = max(x - playerspeed, -280)
    player.setx(x)

def move_right():
    x = player.xcor()
    x = min(x + playerspeed, 280)
    player.setx(x)

def fire_bullet():
    global bulletstate
    if bulletstate == "ready":
        bulletstate = "fire"
        x = player.xcor()
        y = player.ycor() + 10
        bullet.setposition(x, y)
        bullet.showturtle()

# Keyboard bindings
turtle.listen()
turtle.onkey(move_left, "a")
turtle.onkey(move_right, "d")
turtle.onkey(fire_bullet, "w")

# Game loop using ontimer
def game_loop():
    global bulletstate, invaderspeed, score

    # Bullet movement
    if bulletstate == "fire":
        y = bullet.ycor() + bulletspeed
        bullet.sety(y)

        if bullet.ycor() > 275:
            bullet.hideturtle()
            bulletstate = "ready"

    # Invader movement and collision detection
    for invader in invaderList:
        x = invader.xcor() + invaderspeed
        invader.setx(x)

        if invader.xcor() > 280 or invader.xcor() < -280:
            invaderspeed *= -1
            for inv in invaderList:
                inv.sety(inv.ycor() - 25)

        # Collision with bullet
        if invader.distance(bullet) < 15:
            bullet.hideturtle()
            bulletstate = "ready"
            bullet.setposition(0, -400)
            invader.setposition(random.randint(-200, 200), random.randint(100, 200))
            score += 10
            print("Score:", score)

        # Collision with player
        if invader.distance(player) < 15:
            player.hideturtle()
            invader.hideturtle()
            print("Game Over! Final Score:", score)
            return  # End game

    turtle.ontimer(game_loop, 20)  # Schedule next loop

# Start the game
game_loop()
turtle.done()
